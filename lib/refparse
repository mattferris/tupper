#!/bin/bash
#
# tupper - A container image manager
#
# Copyright (c) 2018 Matt Ferris <matt@bueller.ca>
# Licensed under BSD 2-clause license
# github.com/mattferris/tupper/blob/master/License.txt
#

set -e

if ! [[ -f "$TUP_LIB_DIR/includes/common.inc" ]]; then
    echo "error: can't locate common.inc" >&2
    exit 1
fi

. "$TUP_LIB_DIR/includes/common.inc"

trap tup_error ERR


#
# print usage
#
_usage() {
    cat <<EOF

usage: $TUP_FRONT_CMD $(basename $0) <ref> [ --help ] [ --type <type> ]

Resolve a partial ID into a full ID.

Arguments:

    ref     The name or ID of the object
    --help  Print usage information
    --type  The object type: container, image, layer, or volume

EOF
    exit 1
}


#
# parse args
#

tup_getopt_required=(1)
tup_getopt_optional=(type:)
while tup_getopt; do
    case $tup_getopt_name in
        1) ref=$tup_getopt_value ;;
        help) _usage ;;
        type)
            case $tup_getopt_value in
                container) ;;
                image) ;;
                layer) ;;
                volume) ;;
                *) tup_error 1 "invalid type specified: $tup_getopt_value" ;;
            esac
            opt_type=$tup_getopt_value
            ;;
    esac
done

# handle option errors
tup_error_getopt

# check for missing required options
if [[ ${#tup_getopt_required[@]} -ge 1 ]]; then
    _usage
fi


#
# main
#

case $opt_type in
    container) searchdir="$TUP_STORAGE_DIR/containers";;
    image) searchdir="$TUP_STORAGE_DIR/images";;
    layer) searchdir="$TUP_STORAGE_DIR/layers";;
    volume) searchdir="$TUP_STORAGE_DIR/volumes";;
esac

# use find to search for the ref
results=$(find "$searchdir" -mindepth 2 -maxdepth 2 -name "$ref*")

# make sure we only have one result
if [[ -z "$results" ]]; then
    echo "error: ref not found: $ref" >&2
    exit 10
fi
if [[ "$(echo "$results" | wc -l)" != "1" ]]; then
    echo "error: ref resolved to more than one object: $ref" >&2
    exit 11
fi

echo $(basename $results)

exit 0
