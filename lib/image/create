#!/bin/bash
#
# tupper - A container image manager
#
# Copyright (c) 2018 Matt Ferris <matt@bueller.ca>
# Licensed under BSD 2-clause license
# github.com/mattferris/tupper/blob/master/License.txt
#

set -e

if ! [[ -f "$TUP_LIB_DIR/includes/common.inc" ]]; then
    echo "error: image create: can't locate common.inc" >&2
    exit 1
fi

. "$TUP_LIB_DIR/includes/common.inc"

tup_conf_userload

_cleanup() {
    tup_debug 1 "cleaning up"
    if [[ ! -z "$tmpid" && -d "$tmpdir" ]]; then
        rm -r "$tmpdir" 2>&1 >/dev/null
    fi
}
trap _cleanup KILL EXIT
trap tup_error ERR


#
# print usage
#
_usage() {
    cat <<EOF

usage: $TUP_FRONT_CMD $(basename $0) <name> { --layers <ref>:<mount>,... | --path <path> } [ --plain | --squashfs | --tgz ] [ --parent <ref> ] [ --help ] [ --labels <label>,... ] [ --boot | --entrypoint <cmd> ]

Create a new image named <name>, using either layer <ref> or the contents of
<path> as it's filesystem.

Arguments:

    name          The name the image

    --boot        Containers based on this image should be booted
    --entrypoint  Containers based on this image should run <cmd> on start
    --help        Print usage information
    --labels      Labels to apply to the image
    --layers      One or more <ref>:<mount> pairs to use as the image's filesystem
    --parent      Set <ref> as the parent of the image
    --path        The path containing the image's filesystem
    --plain       Create layer using plain format
    --squashfs    Create layer using squashfs format
    --tgz         Create layer using tgz format
    --volumes     One or more <volume>:<mountpoint> pairs to use as the image's filesystem

EOF
    exit 1
}

tup_getopt_required=(1)
tup_getopt_optional=(boot entrypoint: help labels: layers: parent: path: plain squashfs tgz volumes:)
while tup_getopt; do
    case $tup_getopt_name in
        1) name=$tup_getopt_value ;;
        boot) opt_boot=1 ;;
        entrypoint) opt_entrypoint=$tup_getopt_value ;;
        help) _usage ;;
        labels) opt_labels=$tup_getopt_value ;;
        layers) opt_layers=$tup_getopt_value ;;
        parent) opt_parent=$tup_getopt_value ;;
        path) opt_path=$tup_getopt_value ;;
        plain) opt_layer_format="plain" ;;
        squashfs) opt_layer_format="squashfs" ;;
        tgz) opt_layer_format="tgz" ;;
        volumes) opt_volumes=$tup_getopt_value ;;
    esac
done

# handle getopt errors
tup_error_getopt

# check for missing required options
if [[ ${#tup_getopt_required[@]} -ge 1 ]]; then
    _usage
fi

if [[ ! -z $opt_layers && ! -z $opt_volumes ]] \
   || [[ ! -z $opt_path && ! -z $opt_layers ]] \
   || [[ ! -z $opt_path && ! -z $opt_volumes ]]; then
    tup_error 1 "image create: only one of --layer, --path, or --volume can be specified"
fi

if [[ ! -z $opt_layer_format && ! -z $opt_layers ]]; then
    tup_notice "image create: using --${opt_layer_format} with --layers doesn't make sense, ignoring"
fi

#
# check prerequisites
#

if [[ ! -z $opt_path && ! -d "$opt_path" ]]; then
    tup_error 2 "image create: path doesn't exist: $opt_path"
fi

if [[ ! -z $opt_parent ]] && ! parentid=$(tup refparse --image "$opt_parent"); then
    tup_error 2 "image create: parent image doesn't exist: $opt_parent"
fi

if [[ ! -z $opt_boot && ! -z $opt_entrypoint ]]; then
    tup_error 2 "image create: only one of --boot or --entrypoint can be specified"
fi


#
# main
#

tmpid=$(tup_sum_str $name $(date))
tmpdir="$TUP_STORAGE_DIR/staging/$tmpid"

if ! (mkdir -p "$tmpdir"); then
    tup_error 3 "image create: failed to create temporary image directory: $tmpdir"
fi
tup_debug 1 "image create: created temporary image directory $tmpdir"

touch "$tmpdir/conf"
tup_conf set path "$tmpdir/conf" author "$TUP_USER_NAME <$TUP_USER_EMAIL>"
tup_conf set path "$tmpdir/conf" name $name
tup_conf set path "$tmpdir/conf" date $(date --iso-8601=seconds)

if [[ ! -z $opt_path ]]; then

    tup_debug 1 "image create: creating new layer from path: $opt_path"

    if [[ ! -z $opt_layer_format ]]; then
        opt_layer_format="--$opt_layer_format"
    fi

    # create the new layer
    if ! layerid=$(tup layer create --path "$opt_path" $opt_layer_format); then
        tup_error 4 "image create: failed to initialize image: $name"
    fi

    tup_conf set path "$tmpdir/conf" layers $layerid:/

elif [[ ! -z $opt_layers ]]; then

    hasroot=0
    if [[ ! -z $opt_layers ]]; then

        layers=()
        for i in ${opt_layers/,/ }; do
            layer=(${i/:/ })
            tup_debug 2 "image create: checking layer ${layer[0]}:${layer[1]}"
            if ! layerid=$(tup refparse --layer "${layer[0]}"); then
                tup_error 2 "image create: layer doesn't exist: ${layer[0]}"
            fi
            if [[ ${layer[1]} = "/" ]]; then
                hasroot=1
            fi
            layers=(${layers[@]} $layerid:${layer[1]})
        done
    fi

    if [[ $hasroot = 0 ]]; then
        tup_error 2 "image create: no root filesystem specified"
    fi

    tup_conf set path "$tmpdir/conf" layers "${layers[@]}"

fi

if [[ ! -z $parentid ]]; then
    tup_conf set path "$tmpdir/conf" parent "$parentid"
fi

if [[ ! -z $opt_labels ]]; then
    tup_conf set path "$tmpdir/conf" labels ${opt_labels/,/ }
fi

if [[ ! -z $opt_boot ]]; then
    tup_conf set path "$tmpdir/conf" boot true
fi

if [[ ! -z $opt_entrypoint ]]; then
    tup_conf set path "$tmpdir/conf" entrypoing "$opt_entrypoint"
fi

imageid=$(tup_sum_dir "$tmpdir")
path=$(tup_path "$imageid")
pdir=$(dirname $path);

if ! (mkdir -p "$TUP_STORAGE_DIR/images/$pdir"); then
    tup_error 3 "image create: failed to create images parent directory: $TUP_STORAGE_DIR/images/$pdir"
fi

if ! (mv "$tmpdir" "$TUP_STORAGE_DIR/images/$pdir/$imageid"); then
    tup_error 3 "image create: failed to create image dir $TUP_STORAGE_DIR/images/$path"
fi
tup_debug 1 "image create: moved $tmpdir to $TUP_STORAGE_DIR/images/$path"

if [[ -t 1 ]]; then
    echo -n "created image $name "
fi

echo $imageid

exit 0
