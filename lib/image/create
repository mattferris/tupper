#!/bin/bash
#
# tupper - A container image manager
#
# Copyright (c) 2018 Matt Ferris <matt@bueller.ca>
# Licensed under BSD 2-clause license
# github.com/mattferris/tupper/blob/master/License.txt
#

set -e

if ! [[ -f "$TUP_LIB_DIR/includes/common.inc" ]]; then
    echo "error: can't locate common.inc" >&2
    exit 1
fi

. "$TUP_LIB_DIR/includes/common.inc"

_cleanup() {
    tup_debug 1 "cleaning up"
    if [[ ! -z "$tmpid" && -d "$tmpdir" ]]; then
        rm -r "$tmpdir" 2>&1 >/dev/null
    fi
}
trap _cleanup KILL EXIT
trap tup_error ERR


#
# print usage
#
_usage() {
    cat <<EOF

usage: $TUP_FRONT_CMD $(basename $0) <name> { --layer <ref> | --path <path> } [ --help ] [ --labels <label>,... ]

Create a new image named <name>, using either layer <ref> or the contents of
<path> as it's filesystem.

Arguments:

    name      The name the image

    --help    Print usage information
    --labels  Labels to apply to the image
    --layer   The layer ref to use as the image's filesystem
    --path    The path containing the image's filesystem

EOF
    exit 1
}

tup_getopt_required=(1)
tup_getopt_optional=(help labels: layer: path:)
while tup_getopt; do
    case $tup_getopt_name in
        1) name=$tup_getopt_value ;;
        help) _usage ;;
        labels) opt_labels=$tup_getopt_value ;;
        layer) opt_layer=$tup_getopt_value ;;
        path) opt_path=$tup_getopt_value ;;
    esac
done

# handle getopt errors
tup_error_getopt

# check for missing required options
if [[ ${#tup_getopt_required[@]} -ge 1 ]]; then
    _usage
fi

if [[ ! -z "$opt_layer" && ! -z "$opt_path" ]]; then
    echo "error: either '--layer' or '--path' can be specified, not both" >&2
    exit 1
fi


#
# check prerequisites
#

if [[ ! -z "$opt_path" && ! -d "$opt_path" ]]; then
    echo "error: path doesn't exist: $opt_path" >&2
    exit 2
fi

if [[ ! -z "$opt_layer" ]] && ! layerid=$(tup refparse --layer "$opt_layer"); then
    echo "error: layer doesn't exist: $opt_layer" >&2
    exit 2
fi


#
# main
#

if [[ -z "$layerid" ]]; then
    tup_debug 1 "creating new layer from path: $opt_path"
    # create the new layer
    if ! layerid=$(tup layer create "$opt_path" --format squashfs | cut -d\  -f3); then
        echo "error: failed to initialize image: $name" >&2
        exit 4
    fi
else
    tup_debug 1 "using existing layer $layerid"
    if ! layerid=$(tup refparse --layer "$opt_layer"); then
        echo "error: layer doesn't exist; $opt_layer" >&2
        exit 2
    fi
fi

tmpid=$(tup_sum_str $name $(date))
tmpdir="$TUP_STORAGE_DIR/staging/$tmpid"

if ! (mkdir -p "$tmpdir"); then
    echo "error: failed to create temporary image directory: $tmpdir" >&2
    exit 3
fi
tup_debug 1 "created temporary image directory $tmpdir"

touch "$tmpdir/conf"
tup_conf set path "$tmpdir/conf" name $name
tup_conf set path "$tmpdir/conf" date $(date --iso-8601=seconds)
tup_conf set path "$tmpdir/conf" volumes $layerid

if [[ ! -z "$opt_labels" ]]; then
    tup_conf set path "$tmpdir/conf" labels $(echo $opt_labels | tr , \ )
fi

imageid=$(tup_sum_dir "$tmpdir")
path=$(tup_path "$imageid")
pdir=$(dirname $path);

if ! (mkdir -p "$TUP_STORAGE_DIR/images/$pdir"); then
    echo "error: failed to create images parent directory: $TUP_STORAGE_DIR/images/$pdir" >&2
    exit 3
fi

if ! (mv "$tmpdir" "$TUP_STORAGE_DIR/images/$pdir/$imageid"); then
    echo "error: failed to create image dir $TUP_STORAGE_DIR/images/$path" >&2
    exit 3
fi
tup_debug 1 "moved $tmpdir to $TUP_STORAGE_DIR/images/$path"

if [[ -t 1 ]]; then
    echo -n "created image $name "
fi

echo $imageid

exit 0
