#!/bin/bash
#
# tupper - A container image manager
#
# Copyright (c) 2018 Matt Ferris <matt@bueller.ca>
# Licensed under BSD 2-clause license
# github.com/mattferris/tupper/blob/master/License.txt
#

set -e

if ! [[ -f "$TUP_LIB_DIR/includes/common.inc" ]]; then
    echo "error: can't locate common.inc" >&2
    exit 1
fi

. "$TUP_LIB_DIR/includes/common.inc"

_cleanup() {
    tup_debug 1 "cleaning up"
    if [[ ! -z "$target" && -d "$target" ]]; then
        rm -r "$target" 2>&1 >/dev/null
    fi
}
trap _cleanup KILL EXIT
trap tup_error ERR

format=$1
source=$2

if [[ -z "$source" ]]; then
    cat <<EOF >&2

usage: $TUP_FRONT_CMD $(basename $0) <format> <source>

Mount a volume.

Arguments:

    format  The format of the source filesystem
    source  The path to the source filesystem

EOF
    exit 1
fi

#
# check prerequisites
#

if [[ ! -d "$source" && ! -f "$source" ]]; then
    echo "error: source doesn't exist: $source" >&2
    exit 2
fi

volumeid=$(tup_sum_str "$source")
vdir="$TUP_STORAGE_DIR/volumes/$(tup_path "$volumeid")"

if [[ -d "$vdir" ]]; then
    echo "error: volume is already mounted: $source" >&2
    exit 2
fi

#
# mount filesystem of specified format
#

if ! (mkdir -p "$vdir"); then
    echo "error: failed to create volume directory: $vdir"
    exit 3
fi
tup_debug 1 "created volume directory $vdir"

target="$vdir/mount"
case $format in

    plain)
        if ! (cp -rp "$source" "$target"); then
            echo "error: failed to copy source: $source" >&2
            exit 3
        fi
        tup_debug 1 "copied $source to $target"
        ;;

    squashfs)
        if ! (mkdir "$target"); then
            echo "error: failed to create volume directory: $target" >&2
            exit 3
        fi
        if ! (mount -t squashfs "$source" "$target" 2>&1 >/dev/null); then
            echo "error: failed to mount squashfs: $source" >&2
            exit 3
        fi
        tup_debug 1 "mounted squashfs $source in $target"
        ;;

    tgz)
        if ! (mkdir "$target"); then
            echo "error: failed to create volume directory: $target" >&2
            exit 3
        fi
        if ! (tar -C "$target" xzf "$source" 2>&1 >/dev/null); then
            echo "error: failed to extract tarball from source: $source" >&2
            exit 3
        fi
        tup_debug 1 "extracted tarball $source to $target"
        ;;

    *)
        echo "error: invalid format specified: $format" >&2
        exit 1
        ;;

esac

tup_conf set volume $volumeid source "$source"
tup_conf set volume $volumeid format "$format"

echo "mounted volume $source as $volumeid"
exit 0
