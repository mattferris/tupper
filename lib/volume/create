#!/bin/bash
#
# tupper - A container image manager
#
# Copyright (c) 2018 Matt Ferris <matt@bueller.ca>
# Licensed under BSD 2-clause license
# github.com/mattferris/tupper/blob/master/License.txt
#

set -e

if ! [[ -f "$TUP_LIB_DIR/includes/common.inc" ]]; then
    echo "error: can't locate common.inc" >&2
    exit 1
fi

. "$TUP_LIB_DIR/includes/common.inc"

_cleanup() {
    tup_debug 1 "cleaning up"
    if [[ ! -z "$tmpdir" && -d "$tmpdir" ]]; then
        rm -r "$tmpdir" 2>&1 >/dev/null
    fi
}
trap _cleanup KILL EXIT
trap tup_error ERR


#
# print usage
#
_usage() {
    cat <<EOF

usage: $TUP_FRONT_CMD $(basename $0) [ <source> ] [ --empty | --filesystem | --plain | --squashfs | --tgz ] [ --labels <label>,... ] [ --layer <ref> ] [ --help ]

Mount a volume. If --empty is specified, create an empty volume.

Arguments:

    source      The source of the volume

    --help        Print usage information
    --empty       Create an empty volume
    --labels      Labels for the volume
    --layer       The layer the volume belongs to
    --filesystem  <source> refers to a filesystem ID (default)
    --plain       <source> refers to a directory path
    --squashfs    <source> refers to a squashfs filesystem
    --tgz         <source> refers to a gzipped tarball file

EOF
    exit 1
}


#
# parse args
#

format="squashfs"

tup_getopt_required=()
tup_getopt_optional=(1 empty help layer: labels: filesystem plain squashfs tgz)
while tup_getopt; do
    case $tup_getopt_name in
        1) source=$tup_getopt_value ;;
        empty) format="empty" ;;
        help) _usage ;;
        labels) opt_labels=$tup_getopt_value ;;
        layer) opt_layer=$tup_getopt_value ;;
        filesystem) opt_filesystem="filesystem" ;;
        plain) format="plain" ;;
        squashfs) format="squashfs" ;;
        tgz) format="tgz" ;;
    esac
done

# handle getopt errors
tup_error_getopt

# check for missing required args
if [[ ${#tup_getopt_required[@]} -ge 1 ]]; then
    _usage
fi


#
# check prerequisites
#

if [[ -z "$opt_filesystem"  && ! $format = "empty" && ! -d "$source" && ! -f "$source" ]]; then
    tup_error 2 "source doesn't exist: $source"
fi

if [[ ! -z $opt_filesystem ]]; then 
    if ! filesystemid=$(tup refparse --filesystem "$source"); then
        tup_error 2 "filesystem doesn't exist: $source"
    fi
    source="$TUP_STORAGE_DIR/filesystems/$(tup_path $filesystemid)"
fi

volumeid=$(tup_sum_str "$source")

if  [[ $format = "empty" ]]; then
    # generate random ID
    volumeid=$(dd status=none if=/dev/urandom bs=32 count=1 | hexdump -ve '/1 "%02x"')
fi

if [[ ! -z "$opt_layer" ]] && ! layerid=$(tup refparse --layer "$opt_layer"); then
    tup_error 2 "layer doesn't exist: $opt_layer"
fi

vdir="$TUP_STORAGE_DIR/volumes/$(tup_path "$volumeid")"

if [[ -d "$vdir" ]]; then
    if [[ -t 1 ]]; then
        echo -n "existing volume "
    fi
    echo $volumeid
    tup_warn 100 "volume is already mounted: $volumeid"
fi

#
# mount filesystem of specified format
#

tmpdir="$TUP_STORAGE_DIR/staging/$(tup_path $volumeid)"
if ! (mkdir -p "$tmpdir"); then
    tup_error 4 "failed to create staging directory: $tmpdir"
fi

target="$tmpdir/mount"
case $format in

    empty)
        if ! (mkdir -p "$target"); then
            tup_error 3 "failed to create empty mount"
        fi
        ;;

    plain)
        if ! (cp -rp "$source" "$target"); then
            tup_error 3 "failed to copy source: $source"
        fi
        tup_debug 1 "copied $source to $target"
        ;;

    squashfs)
        if ! (mkdir "$target"); then
            tup_error 3 "failed to create volume directory: $target"
        fi
        if ! (mount -t squashfs "$source" "$target" 2>&1 >/dev/null); then
            tup_error 3 "failed to mount squashfs: $source in $target"
        fi
        tup_debug 1 "mounted squashfs $source in $target"
        ;;

    tgz)
        if ! (mkdir "$target"); then
            tup_error 3 "failed to create volume directory: $target"
        fi
        if ! (tar -C "$target" -xzf "$source" 2>&1 >/dev/null); then
            tup_error 3 "failed to extract tarball from source: $source"
        fi
        tup_debug 1 "extracted tarball $source to $target"
        ;;

    *)
        tup_error 1 "invalid format specified: $format"
        ;;

esac

conffile="$tmpdir/conf"
touch "$conffile"
tup_conf set path "$conffile" source "$source"
tup_conf set path "$conffile" format "$format"
tup_conf set path "$conffile" date $(date --iso-8601=seconds)

if [[ ! -z "$opt_labels" ]]; then
    labels=$(echo -n "$opt_labels" | tr , \ )
    tup_conf set path "$conffile" labels "$labels"
fi

if [[ ! -z "$layerid" ]]; then
    tup_conf set path "$conffile" layer "$layerid"
fi

if ! (mkdir -p "$(dirname "$vdir")"); then
    tup_error 4 "failed to create volume directory: $vdir"
fi
tup_debug 1 "created volume directory $vdir"

if ! (mv "$tmpdir" "$(dirname "$vdir")"); then
    tup_error 4 "failed to move staging directory: $tmpdir"
fi

if [[ -t 1 ]]; then
    echo -n "created volume "
fi

echo $volumeid

exit 0
