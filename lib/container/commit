#!/bin/bash
#
# tupper - A container image manager
#
# Copyright (c) 2018 Matt Ferris <matt@bueller.ca>
# Licensed under BSD 2-clause license
# github.com/mattferris/tupper/blob/master/License.txt
#

set -e

if ! [[ -f "$TUP_LIB_DIR/includes/common.inc" ]]; then
    echo "error: container commit: can't locate common.inc" >&2
    exit 1
fi

. "$TUP_LIB_DIR/includes/common.inc"

_cleanup() {
    tup_debug 1 "container commit: cleaning up"
    if [[ ! -z "$tmpdir" && -d "$tmpdir" ]]; then
        rm -r "$tmpdir" 2>&1 >/dev/null
    fi
}
trap _cleanup KILL EXIT
trap tup_error ERR


#
# print usage
#
_usage() {
    cat <<EOF

usage: $TUP_FRONT_CMD $(basename $0) <ref> [ --plain | --squashfs | --tgz ] [ --labels <label>,... | --extra-labels <label>,... ] [ --help ]

Commit changes made in the container.

Arguments:

    ref             The container to commit

    --help          Print usage information
    --extra-labels  Additional labels for the layer
    --labels        Override labels assigned to the volume
    --plain         Commit volume in plain format
    --squashfs      Commit volume in squashfs format
    --tgz           Commit volume in tgz format

EOF
    exit 1
}


#
# parse args
#

tup_getopt_required=(1)
tup_getopt_optional=(help extra-labels: labels: plain squashfs tgz)
while tup_getopt; do
    case $tup_getopt_name in
        1) ref=$tup_getopt_value ;;
        extra-labels) opt_args="$opt_args --extra-labels $tup_getopt_value" ;;
        help) _usage ;;
        labels) opt_args="$opt_args --labels $tup_getopt_value" ;;
        plain) opt_args="$opt_args --plain" ;;
        squashfs) opt_args="$opt_args --squashfs" ;;
        tgz) opt_args="$opt_args --tgz" ;;
    esac
done

# handle getopt errors
tup_error_getopt

# check for missing required args
if [[ ${#tup_getopt_required[@]} -ge 1 ]]; then
    _usage
fi


#
# check prerequisites
#

if ! containerid=$(tup refparse --container "$ref"); then
    tup_error 2 "container commit: container doesn't exist: $ref"
fi

layers=($(tup_conf get container $containerid layers))

if [[ -z $layers ]]; then
    fl=${layers[0])
    parts=(${fl/:/ })
    opt_args="$opt_args --layer ${parts[0]}"
fi

volumeid=$(tup_conf get container $containerid volume)
if [[ -z $volumeid ]]; then
    tup_error 2 "container commit: container doesn't have an active volume"
fi

if ! layerid=$(tup volume commit $volumeid $opt_args); then
    tup_error 2 "container commit: failed to commit changes in container: $ref"
fi

tup_conf set container $containerid layers $layerid:/
tup_conf unset container $containerid volume
