#!/bin/bash
#
# tupper - A container image manager
#
# Copyright (c) 2018 Matt Ferris <matt@bueller.ca>
# Licensed under BSD 2-clause license
# github.com/mattferris/tupper/blob/master/License.txt
#

set -e

if ! [[ -f "$TUP_LIB_DIR/includes/common.inc" ]]; then
    echo "error: can't locate common.inc" >&2
    exit 1
fi

. "$TUP_LIB_DIR/includes/common.inc"

_cleanup() {
    tup_debug 1 "cleaning up"
    if [[ ! -z "$tmpdir" && -d "$tmpdir" ]]; then
        rm -r "$tmpdir" 2>&1 >/dev/null
    fi
}
trap _cleanup KILL EXIT
trap tup_error ERR


#
# print usage
#
_usage() {
    cat <<EOF

usage: $TUP_FRONT_CMD $(basename $0) <ref> [ --labels <label>,... | --extra-labels >label>,... ] [ --help ]

Mount a volume.

Arguments:

    ref             The source of the volume

    --help          Print usage information
    --extra-labels  Additional labels for the layer
    --labels        Override labels assigned to the volume

EOF
    exit 1
}


#
# parse args
#

tup_getopt_required=(1)
tup_getopt_optional=(help extra-labels: labels:)
while tup_getopt; do
    case $tup_getopt_name in
        1) ref=$tup_getopt_value ;;
        extra-labels) opt_extra_labels=$tup_getopt_value ;;
        labels) opt_labels=$tup_getopt_value ;;
        help) _usage ;;
    esac
done

# handle getopt errors
tup_error_getopt

# check for missing required args
if [[ ${#tup_getopt_required[@]} -ge 1 ]]; then
    _usage
fi


#
# check prerequisites
#

if ! containerid=$(tup refparse --container "$ref"); then
    tup_error 2 "container doesn't exist: $ref"
fi

if [[ ! -z "$opt_extra_labels" && ! -z "$opt_labels" ]]; then
    tup_error 2 "only one of --extra-labels and --labels must be specified"
fi


#
# main
#

name=$(tup_conf get container $containerid name)

volumes=$(tup_conf get container $containerid volumes)
layers=($(tup_conf get container $containerid layers))
for vol in $volumes; do
    volume=(${vol/:/ /})
    if ! layerid=$(tup volume commit ${volume[0]}); then
        layers=(${layers[@]} $layerid:${volume[1]})
    fi
done

if [[ ${#layers[@]} = 0 ]]; then
    tup_error 2 "container doesn't have any layers or volumes"
fi

labels=$(tup_conf get container $containerid labels)
if [[ ! -z "$opt_extra_labels" ]]; then
    opt_extra_labels=$(echo -n "$opt_extra_labels" | tr , \ )
    labels="$labels $opt_extra_labels"
elif [[ ! -z "$opt_labels" ]]; then
    labels=$opt_labels
fi

if [[ ! -z "$labels" ]]; then
    labels="--labels $(echo -n "$labels" | tr \  ,)"
fi

parent=$(tup_conf get container $containerid image)
if [[ ! -z "$parent" ]]; then
    parent="--parent $parent"
fi

boot=$(tup_conf get container $containerid boot)
if [[ ! -z "$boot" ]]; then
    boot="--boot"
fi

entrypoint=$(tup_conf get container $containerid entrypoint)
if [[ ! -z "$entrypoint" ]]; then
    entrypoint="--entrypoint \"$entrypoint\""
fi

layersarg=${layers[@]}
tup_debug 2 "tup image create "$name" --layers ${layersarg/ /:/} $labels $parent $boot $entrypoint"
if ! imageid=$(tup image create "$name" --layers ${layersarg/ /:/} $labels $parent $boot $entrypoint 2>/dev/null); then
    tup_error 3 "failed to create image: $imageid"
fi

if [[ -t 1 ]]; then
    echo -n "committed container as image "
fi

echo $imageid

exit 0
