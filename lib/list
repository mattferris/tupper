#!/bin/bash
#
# tupper - A container image manager
#
# Copyright (c) 2018 Matt Ferris <matt@bueller.ca>
# Licensed under BSD 2-clause license
# github.com/mattferris/tupper/blob/master/License.txt
#

set -e

if ! [[ -f "$TUP_LIB_DIR/includes/common.inc" ]]; then
    echo "error: can't locate common.inc" >&2
    exit 1
fi

. "$TUP_LIB_DIR/includes/common.inc"

trap tup_error ERR


#
# print usage
#
_usage() {
    cat <<EOF

usage: tup layer list type [ --with-label <label> ] [ --date ] [ --detail ] [ --format ] [ --help ] [ --id-only ] [ --labels ] [ --long-id ] [ --name ]

List objects. If --label is specified, list objects labelled with <label>.

Arguments:

    type  The type of object to list: container, image, layer, or volume

    General options:

        --help  Print usage information

    Filter options:

        --with-label  List objects labelled with <label>

    Display options:

        --date     Show creation date and time
        --format   Show the object format (valid for layers, volumes)
        --id-only  Only dislay object IDs (implies --long)
        --labels   Show object labels (valid for containers, images, layers)
        --long-id  Show full object IDs instead of partials ones
        --name     Show the name of the object (valid for containers, images)

EOF
    exit 1
}


#
# parse args
#

tup_getopt_required=(1)
tup_getopt_optional=(date format help id-only labels long-id name with-label:)
while tup_getopt; do
    case $tup_getopt_name in
        1)
            case $tup_getopt_value in
                container) ;;
                image) ;;
                layer) ;;
                volume) ;;
                *) tup_error 1 "invalid type specified: $tup_getopt_value" ;;
            esac
            opt_type=$tup_getopt_value
            ;;
        date) opt_date=1 ;;
        help) _usage ;;
        id-only) opt_id_only=1 ;;
        labels) opt_labels=1 ;;
        long-id) opt_long_id=1 ;;
        with-label) opt_with_label=$tup_getopt_value ;;
    esac
done

# handle option errors
tup_error_getopt

# check for missing required options
if [[ ${#tup_getopt_required[@]} -ge 1 ]]; then
    _usage
fi


#
# main
#

objdir="$TUP_STORAGE_DIR/${opt_type}s"

if ! objects=$(find "$objdir" -mindepth 2 -maxdepth 2 -exec basename '{}' \;); then
    tup_error 4 "find failed in $objdir"
fi

for i in $objects; do
    if [[ ! -z "$opt_with_label" ]]; then
       labels=$(tup_conf get $opt_type $i labels) 
       matched=0
       for label in $labels; do
           if [[ $opt_with_label = $label ]]; then
               matched=1
           fi
       done
       if [[ $matched = 0 ]]; then
           continue
       fi
    fi

    if [[ ! -z "$opt_long_id" ]]; then
        echo -n $i
    else
        echo -n ${i:0:12}
    fi

    if [[ ! -z "$opt_id_only" ]]; then
        continue
    fi

    if [[ ! -z "$opt_date" ]]; then
        echo -n "  $(tup_conf get $opt_type $i date)"
    fi

    if [[ ! -z "$opt_labels" ]]; then
        echo -n "  ($(tup_conf get $opt_type $i labels))"
    fi

    echo
done

exit 0
