#!/bin/bash
#
# tupper - A container image manager
#
# Copyright (c) 2018 Matt Ferris <matt@bueller.ca>
# Licensed under BSD 2-clause license
# github.com/mattferris/tupper/blob/master/License.txt
#

set -e

if ! [[ -f "$TUP_LIB_DIR/includes/common.inc" ]]; then
    echo "error: layer mount: can't locate common.inc" >&2
    exit 1
fi

. "$TUP_LIB_DIR/includes/common.inc"

trap tup_error ERR


#
# print usage
#
_usage() {
    cat <<EOF

usage: $TUP_FRONT_CMD $(basename $0) <ref> [ --help ] [ --lineage ]

Mount a layer.

Arguments:

    ref        The ID of the layer to mount

    --help     Print usage information
    --lineage  Also mount the layer's ancestors 

EOF
    exit 1
}


#
# parse args
#

tup_getopt_required=(1)
tup_getopt_optional=(help lineage)
while tup_getopt; do
    case $tup_getopt_name in
        1) ref=$tup_getopt_value ;;
        help) _usage ;;
        lineage) opt_lineage=1 ;;
    esac
done

# handle getopt errors
tup_error_getopt

# check for missing required args
if [[ ${#tup_getopt_required[@]} -ge 1 ]]; then
    _usage
fi


#
# check prerequisites
#

if ! layerid=$(tup refparse --layer "$ref"); then
    tup_error 2 "layer mount: layer doesn't exist: $ref"
fi


#
# main
#

layers=($layerid)

if [[ $opt_lineage = 1 ]]; then
    layers=($(tup layer lineage $layerid --long-id --reverse))
fi

tup_debug 2 "layer mount: mounting layers: ${layers[@]}"

for lid in ${layers[@]}; do
    tup_debug 3 "layer mount: mounting layer: $lid"
    filesystemid=$(tup_conf get layer $lid filesystem)
    format=$(tup_conf get layer $lid format)

    tup_debug 2 "layer mount: running tup volume create --filesystem $filesystemid --$format --layer $layerid"
    volumeid=$(tup volume create --filesystem $filesystemid --$format --layer $layerid) || { \
        rtn=$?
        tup_debug 3 "layer mount: tup volume create returned $rtn"
        case $rtn in
            0) ;;
            100) ;;
            *) tup_error 4 "layer mount: failed to mount layer: $layerid" ;;
        esac
    }

    if [[ -t 1 ]]; then
        echo -n "mounted $lid as "
    fi
    echo $volumeid
done

exit 0
