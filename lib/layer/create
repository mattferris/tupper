#!/bin/bash
#
# tupper - A container image manager
#
# Copyright (c) 2018 Matt Ferris <matt@bueller.ca>
# Licensed under BSD 2-clause license
# github.com/mattferris/tupper/blob/master/License.txt
#

set -e

if ! [[ -f "$TUP_LIB_DIR/includes/common.inc" ]]; then
    echo "error: can't locate common.inc" >&2
    exit 1
fi

. "$TUP_LIB_DIR/includes/common.inc"

_cleanup() {
    tup_debug 1 "cleaning up"
    if [[ ! -z "$tmpdir" && -d "$tmpdir" ]]; then
        rm -r "$tmpdir" 2>&1 >/dev/null
    fi
}
trap _cleanup KILL EXIT
trap tup_error ERR


#
# print usage
#
_usage() {
    cat <<EOF

usage: $TUP_FRONT_CMD $(basename $0) <path> [ --help ] [ --labels <label>,... ] [ --parent <ref> ] [ --plain | --squashfs | --tgz ] [ --squashfs-opts <opts> ] [ --tar-opts <opts> ]

Create a new layer, using <path> as it's filesystem.

Arguments:

    path      The path containing the layer's filesystem

    --help      Print usage information
    --labels    Labels to apply to the layer
    --parent    Set <ref> as the parent of the layer
    --plain     Save the layer's filesystem as a plain directory
    --squashfs  Save the layer's filesystem as a squashfs volume (default)
    --tgz       Save the layer's filesystem as a gzipped tarball

    --squashfs-opts
              Options to pass to squashfs

    --tar-opts
              Options to pass to tar

EOF
    exit 1
}


#
# parse args
#

format="squashfs"

tup_getopt_required=(1)
tup_getopt_optional=(help labels: parent: plain squashfs squashfs-opts: tar-opts: tgz)
while tup_getopt; do
    case $tup_getopt_name in
        1) path=$tup_getopt_value ;;
        help) _usage ;;
        labels) opt_labels=$tup_getopt_value ;;
        parent) opt_parent=$tup_getopt_value ;;
        plain) format="plain" ;;
        squashfs) format="squashfs" ;;
        squashfs-opts) opt_squashfs_opts=$tup_getopt_value ;;
        tar-opts) opt_tar_opts=$tup_getopt_value ;;
        tgz) format="tgz" ;;
    esac
done

# handle getopt errors
tup_error_getopt

# check for missing required options
if [[ ${#tup_getopt_required[@]} -ge 1 ]]; then
    _usage
fi


#
# check prerequisites
#

if [[ ! -d "$path" ]]; then
    echo "error: path doesn't exist: $path" >&2
    exit 2
fi

if [[ ! -z "$opt_parent" ]] && ! parentid=$(tup refparse --layer "$opt_parent"); then
    echo "error: parent layer doesn't exist: $opt_parent" >&2
    exit 2
fi

#
# create the layer directory
#

tmpid=$(tup_sum_str $path $(date))
tmpdir="$TUP_STORAGE_DIR/staging/$tmpid"

if ! (mkdir -p "$tmpdir"); then
    echo "error: failed to create temporary layer directory: $tmpdir" >&2
    exit 3
fi
tup_debug 1 "created temporary layer directory $tmpdir"


#
# import filesystem into specified format
#

touch "$tmpdir/conf"

case $format in

    plain)
        if ! (cp -rp "$path" "$tmpdir/fs"); then
            echo "error: failed to copy path: $path" >&2
            exit 3
        fi
        tup_debug 1 "copied $path to $tmpdir/fs"
        tup_conf set path "$tmpdir/conf" format plain
        fssum=$(tup_sum_dir "$tmpdir/fs")
        ;;

    squashfs)
        tup_debug 2 "mksquashfs $path $tmpdir/fs -no-progress $opt_squashfs_opts"
        if ! (mksquashfs "$path" "$tmpdir/fs" -no-progress $opt_squashfs_opts 2>&1 >/dev/null); then
            echo "error: failed to create squashfs from path: $path" >&2
            exit 3
        fi
        tup_debug 1 "created squashfs from $path"
        tup_conf set path "$tmpdir/conf" format squashfs
        fssum=$(tup_sum_file "$tmpdir/fs")
        ;;

    tgz)
        tup_debug 2 "tar czf $tmpdir/fs --acls --xattrs $opt_tar_opts $path"
        if ! (tar czf "$tmpdir/fs" --acls --xattrs $opt_tar_opts "$path" 2>&1 >/dev/null); then
            echo "error: failed to create tarball from path: $path" >&2
            exit 3
        fi
        tup_debug 1 "create tarball from $path"
        tup_conf set path "$tmpdir/conf" format tgz
        fssum=$(tup_sum_file "$tmpdir/fs")
        ;;

    *)
        echo "error: invalid format specified: $format" >&2
        exit 1
        ;;

esac

tup_conf set path "$tmpdir/conf" checksum $fssum
tup_conf set path "$tmpdir/conf" date $(date --iso-8601=seconds)

if [[ ! -z "$opt_labels" ]]; then
    tup_conf set path "$tmpdir/conf" labels $(echo $opt_labels | tr , \ )
fi

if [[ ! -z "$parentid" ]]; then
    tup_conf set path "$tmpdir/conf" parent $parentid
fi

layerid=$(tup_sum_dir "$tmpdir")
tup_debug 1 "calculated layer checksum $layerid"

path=$(tup_path $layerid)
pdir=$(dirname $path);

if ! (mkdir -p "$TUP_STORAGE_DIR/layers/$pdir"); then
    echo "error: failed to create container parent directory: $TUP_STORAGE_DIR/layers/$pdir" >&2
    exit 3
fi

if ! (mv "$tmpdir" "$TUP_STORAGE_DIR/layers/$pdir/$layerid"); then
    echo "error: failed to create container dir $TUP_STORAGE_DIR/layers/$path" >&2
    exit 3
fi
tup_debug 1 "moved $tmpdir to $TUP_STORAGE_DIR/layers/$path"

if [[ -t 1 ]]; then
    echo -n "created layer "
fi

echo $layerid

exit 0
