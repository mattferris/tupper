#!/bin/bash
#
# tupper - A container image manager
#
# Copyright (c) 2018 Matt Ferris <matt@bueller.ca>
# Licensed under BSD 2-clause license
# github.com/mattferris/tupper/blob/master/License.txt
#

set -e

if ! [[ -f "$TUP_LIB_DIR/includes/common.inc" ]]; then
    echo "error: can't locate common.inc" >&2
    exit 1
fi

. "$TUP_LIB_DIR/includes/common.inc"

_cleanup() {
    tup_debug 1 "cleaning up"
    if [[ ! -z "$tmpdir" && -d "$tmpdir" ]]; then
        rm -r "$tmpdir" 2>&1 >/dev/null
    fi
}
trap _cleanup KILL EXIT
trap tup_error ERR


#
# print usage
#
_usage() {
    cat <<EOF

usage: $TUP_FRONT_CMD $(basename $0) { --filesystem <ref> | --path <path> } [ --help ] [ --labels <label>,... ] [ --parent <ref> ] [ --plain | --squashfs | --tgz ] [ --squashfs-opts <opts> ] [ --tar-opts <opts> ]

Create a new layer, using <path> as it's filesystem.

Arguments:

    --help           Print usage information
    --filesystem     Use <ref> as the filesystem for the layer
    --labels         Labels to apply to the layer
    --path           Use <path> as the filesystem for the layer
    --parent         Set <ref> as the parent of the layer
    --plain          Save the layer's filesystem as a plain directory
    --squashfs       Save the layer's filesystem as a squashfs volume (default)
    --squashfs-opts  Options to pass to squashfs
    --tar-opts       Options to pass to tar
    --tgz            Save the layer's filesystem as a gzipped tarball

                  

EOF
    exit 1
}


#
# parse args
#

format="squashfs"

tup_getopt_required=()
tup_getopt_optional=(help filesystem: labels: path: parent: plain squashfs squashfs-opts: tar-opts: tgz)
while tup_getopt; do
    case $tup_getopt_name in
        help) _usage ;;
        filesystem) opt_filesystem=$tup_getopt_value ;;
        labels) opt_labels=$tup_getopt_value ;;
        path) opt_path=$tup_getopt_value ;;
        parent) opt_parent=$tup_getopt_value ;;
        plain) format="plain" ;;
        squashfs) format="squashfs" ;;
        squashfs-opts) opt_squashfs_opts=$tup_getopt_value ;;
        tar-opts) opt_tar_opts=$tup_getopt_value ;;
        tgz) format="tgz" ;;
    esac
done

# handle getopt errors
tup_error_getopt

# check for missing required options
if [[ ${#tup_getopt_required[@]} -ge 1 ]]; then
    _usage
fi


#
# check prerequisites
#

if [[ ! -z "$opt_filesystem" && ! -z "$opt_path" ]]; then
    tup_error 2 "only one of --filesystem or --path can be specified"
elif [[ -z "$opt_filesystem" && -z "$opt_path" ]]; then
    tup_error 2 "one of --filesystem or --path must be specified"
fi

if [[ ! -z "$opt_path" && ! -d "$opt_path" ]]; then
    tup_error 2 "path doesn't exist: $opt_path"
fi

if [[ ! -z "$opt_parent" ]] && ! parentid=$(tup refparse --layer "$opt_parent"); then
    tup_error 2 "parent layer doesn't exist: $opt_parent"
fi

if [[ ! -z "$opt_filesystem" ]] && ! filesystemid=$(tup refparse --filesystem "$opt_filesystem"); then
    tup_error 2 "filesystem doesn't exist: $opt_filesystem"
fi

#
# create the layer directory
#

tmpid=$(tup_sum_str $path $(date))
tmpdir="$TUP_STORAGE_DIR/staging/$tmpid"

if ! (mkdir -p "$tmpdir"); then
    tup_error 3 "failed to create temporary layer directory: $tmpdir"
fi
tup_debug 1 "created temporary layer directory $tmpdir"


#
# import filesystem into specified format (if --path)
#

touch "$tmpdir/conf"

if [[ ! -z "$opt_path" ]]; then
    case $format in

        plain)
            if ! (cp -rp "$opt_path" "$tmpdir/fs"); then
                tup_error 3 "error: failed to copy path: $opt_path"
            fi
            tup_debug 1 "copied $opt_path to $tmpdir/fs"
            filesytemid=$(tup_sum_dir "$tmpdir/fs")
            ;;

        squashfs)
            tup_debug 2 "mksquashfs $opt_path $tmpdir/fs -no-progress $opt_squashfs_opts"
            if ! (mksquashfs "$opt_path" "$tmpdir/fs" -no-progress $opt_squashfs_opts 2>&1 >/dev/null); then
                tup_error 3 "failed to create squashfs from path: $opt_path"
            fi
            tup_debug 1 "created squashfs from $opt_path"
            filesystemid=$(tup_sum_file "$tmpdir/fs")
            ;;

        tgz)
            tup_debug 2 "tar czf $tmpdir/fs --acls --xattrs $opt_tar_opts $opt_path"
            if ! (tar czf "$tmpdir/fs" --acls --xattrs $opt_tar_opts "$opt_path" 2>&1 >/dev/null); then
                tup_error 3 "failed to create tarball from path: $opt_path"
            fi
            tup_debug 1 "create tarball from $opt_path"
            filesystemid=$(tup_sum_file "$tmpdir/fs")
            ;;

        *)
            tup_error 1 "invalid format specified: $format"
            ;;

    esac
fi

tup_conf set path "$tmpdir/conf" format $format
tup_conf set path "$tmpdir/conf" filesystem $filesystemid
tup_conf set path "$tmpdir/conf" date $(date --iso-8601=seconds)

if [[ ! -z "$opt_labels" ]]; then
    tup_conf set path "$tmpdir/conf" labels $(echo $opt_labels | tr , \ )
fi

if [[ ! -z "$parentid" ]]; then
    tup_conf set path "$tmpdir/conf" parent $parentid
fi

if ! (tup refparse --filesystem "$filesystemid"); then
    tup_debug 1 "creating filesystem $filesystemid"

    fsdir="$TUP_STORAGE_DIR/filesystems/$(tup_path "$filesystemid")"
    if ! (mkdir -p "$(dirname "$fsdir")"); then
        tup_error 3 "failed to create filesystem dir $(dirname $fsdir)"
    fi
    if ! (mv "$tmpdir/fs" "$fsdir"); then
        tup_error 3 "failed to create filesystem: $filesystemid"
    fi
else
    tup_debug 1 "using existing filesystem $filesystemid"
fi

layerid=$(tup_sum_dir "$tmpdir")
tup_debug 1 "calculated layer checksum $layerid"

path=$(tup_path $layerid)
pdir=$(dirname $path);

if ! (mkdir -p "$TUP_STORAGE_DIR/layers/$pdir"); then
    tup_error 3 "failed to create layer parent directory: $TUP_STORAGE_DIR/layers/$pdir"
fi

if ! (mv "$tmpdir" "$TUP_STORAGE_DIR/layers/$pdir/$layerid"); then
    tup_error 3 "failed to create layer directory $TUP_STORAGE_DIR/layers/$path"
fi
tup_debug 1 "moved $tmpdir to $TUP_STORAGE_DIR/layers/$path"

if [[ -t 1 ]]; then
    echo -n "created layer "
fi

echo $layerid

exit 0
