#!/bin/bash
#
# tupper - A container image manager
#
# Copyright (c) 2018 Matt Ferris <matt@bueller.ca>
# Licensed under BSD 2-clause license
# github.com/mattferris/tupper/blob/master/License.txt
#

name=$1

if [[ -z "$name" ]]; then
    echo "usage: $TUP_FRONT_CMD $(basename $0) <name>" >&2
    exit 1
fi

if [[ ! -d "$TUP_IMGDIR/$name" ]]; then
    echo "error: undefined container specified: $name" >&2
    exit 1
fi

cd "$TUP_IMGDIR/$name"

# ensure mount point exists
if [[ ! -d "mnt" ]]; then
    mkdir mnt
fi

# clean filesystem if marked 'ephemeral'
if [[ -f "ephemeral" -a -d "fs" ]]; then
    rm -r fs
fi

if [[ ! -d "fs" ]]; then
    mkdir fs
fi

# copy sources into filesystem
if [[ -f "sources" ]]; then
    for src in $(cat sources); do
        if [[ ! -z "$( echo $src | grep ':' )" ]]; then
            tpath=$(echo $src | cut -d\: -f2 | sed -e 's/^\///')
            src=$(echo $src | cut -d\: -f1 )
        else
            tpath=$(echo $src | sed -e 's/^\///')
        fi
        mkdir -p "$TUP_IMGDIR/$name/fs/$(dirname $tpath)"
        if ! ( cp -rp "$src" "$TUP_IMGDIR/$name/fs/$tpath" ); then
            echo "error: failed to copy source: $src" >&2
            exit 1
        fi
    done
fi

#
# cleanup if caught exit
#
_cleanup() {
    umount mnt >&2 2>/dev/null
}
trap _cleanup EXIT
trap _cleanup KILL

"$TUP_BINDIR/mount" $name mnt

# check if we're booting (default), or just running a command inside the container
boot="-b"
cmd=""
if [[ -f "cmd" ]]; then
    boot=""
    cmd=$(cat cmd)
fi

netz=""
if [[ -f "net" ]]; then
    netz="--network-zone=$(cat "net")"
fi

systemd-nspawn $boot -nD mnt $netz --machine=$name $cmd
